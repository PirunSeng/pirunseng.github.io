<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pirun Seng]]></title>
  <link href="http://pirunseng.github.io/atom.xml" rel="self"/>
  <link href="http://pirunseng.github.io/"/>
  <updated>2017-10-22T10:20:31+07:00</updated>
  <id>http://pirunseng.github.io/</id>
  <author>
    <name><![CDATA[Pirun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Use of Library We Use]]></title>
    <link href="http://pirunseng.github.io/blog/2017/10/22/make-use-of-library-we-use/"/>
    <updated>2017-10-22T10:12:47+07:00</updated>
    <id>http://pirunseng.github.io/blog/2017/10/22/make-use-of-library-we-use</id>
    <content type="html"><![CDATA[<p>When I was a fresh <strong>Software Developer</strong>, I usually looked for libraries which were suit for programming language I used <strong>Ruby</strong>, in my case.</p>

<p>It is awesome that there is a <strong>Ruby on Rails</strong> which is a framework for <strong>Ruby</strong>. Plus, there are lots of <a href="https://rubygems.org/">Ruby Gems</a> that are designed to help building software with <strong>Ruby</strong> and <strong>Ruby on Rails</strong> as well.</p>

<p>Jump to the point, when I used any Ruby gems, I just built thing with its main and basic usage. Once I came up with an idea to build something more advanced along with that library, my brainstorm was to write the things from scratch. Then, I did research on google for some concepts.</p>

<p>Soon, there was another idea came to my brain. <em>&ldquo;Why didn&rsquo;t I read more document about the library I were using to see whether or not it had what I wanted?&rdquo;</em></p>

<p>Bang! It was just a few minutes searching the feature in its the document, I found the exactly thing as I wanted.</p>

<p>To sum up, it is good to know what main features exist in the library we use, but it is much better to discover everything it can do.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undo Git Merge]]></title>
    <link href="http://pirunseng.github.io/blog/2017/10/22/undo-git-merge/"/>
    <updated>2017-10-22T09:52:46+07:00</updated>
    <id>http://pirunseng.github.io/blog/2017/10/22/undo-git-merge</id>
    <content type="html"><![CDATA[<p><img src="http://pirunseng.github.io/images/git.png" title="Git" alt="Git" /></p>

<p><strong>Git</strong> is awesome and that I&rsquo;ve used it along with my career, software development, so far.</p>

<p>I sometimes get confused doing git merge between branches. When it is a tough time preparing to release my feature to test server in which I have to merge the latest master branch, into my current working branch, let say <strong>update-layout</strong> branch.</p>

<p>Unexpectedly, I have merged <strong>update-layout</strong> into <strong>master</strong>. Actually, I want to merge <strong>master</strong> into <strong>update-layout</strong>.</p>

<p>Luckily, I haven&rsquo;t pushed the master yet so that I can revert/undo merge safely.</p>

<p>To undo the merge, it is as simply as the following:</p>

<ul>
<li>Stay on <strong>master</strong> branch by <code>git checkout master</code></li>
<li>Type <code>git log</code> on the terminal to see the commit histories.</li>
<li>Find the latest commit of <strong>master</strong> branch we want to revert to.</li>
<li>Copy the commit <strong>sha</strong>, e.g. <strong>dbf0e49</strong>.</li>
<li>Back to terminal and type <code>git reset --hard dbf0e49</code></li>
<li>It&rsquo;s done! We&rsquo;re on the latest commit as we want to revert/undo merge.</li>
</ul>


<p>If we&rsquo;re ready to merge <strong>update-layout</strong> into <strong>master</strong> or redo merge, it can be done easily for just do the merge again.</p>

<p>Happy with Git!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy File and Entire Directory From Amazon S3 to Local Machine]]></title>
    <link href="http://pirunseng.github.io/blog/2017/10/21/copy-file-and-entire-directory-from-amazon-s3/"/>
    <updated>2017-10-21T18:06:56+07:00</updated>
    <id>http://pirunseng.github.io/blog/2017/10/21/copy-file-and-entire-directory-from-amazon-s3</id>
    <content type="html"><![CDATA[<p>First thing we need to do is to install <strong>Amazon Web Service Command Line Interface</strong> (AWS CLI).</p>

<p>Depending on your environment, there are different ways to <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">install AWS CLI</a>. I&rsquo;m using Mac OSX, and I prefer to install it via Homebrew <code>brew install awscli</code>.</p>

<p>Then we need to configure awscli by running: <code>aws configure</code>. You will be prompted to put your AWS Access Key Id, Secret Key, Region and Output. The following is an example:</p>

<pre><code>Access key : foo
Secret key : bar
Region     : us-west-1
Output     : json
</code></pre>

<p>We are all set. Now, I gonna show you how we copy a specific file and an entire directory from Amazon S3.</p>

<p><strong>Copy a file : </strong> <code>aws s3 cp s3://bucket_name/dir/file.png local_path</code></p>

<p><strong>Copy a directory : </strong> <code>aws s3 cp --recursive s3://bucket_name/dir local_path</code></p>

<p>The example above, I show you how to copy a file, &lsquo;file.png&rsquo;, and an entire directory, &lsquo;dir&rsquo;, by specifying <code>--recursive</code> option from Amazon S3 to your local machine or directory where you specify <code>local_path</code>.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup and Restore Postgres Database From Amazon RDS]]></title>
    <link href="http://pirunseng.github.io/blog/2017/10/20/backup-and-restore-postgres-database-from-amazon-rds/"/>
    <updated>2017-10-20T16:59:33+07:00</updated>
    <id>http://pirunseng.github.io/blog/2017/10/20/backup-and-restore-postgres-database-from-amazon-rds</id>
    <content type="html"><![CDATA[<p>There are two things might happen when we do the backup and restore database. We need to know whether the database is located in local server or in any separate server like RDS.</p>

<p>Here, I&rsquo;d like to raise two ways of backup Postgres database. One is the local database, and other one is the separate database.</p>

<p><strong>Local Database</strong></p>

<pre><code>Backup: pg_dump -n schema_name -d db_name &gt; backup_filename.dump

Restore: psql db_name &lt; backup_filename.dump
</code></pre>

<p><strong>Host Database (Amazon RDS)</strong> (You will be prompted to type your database password.)</p>

<pre><code>Backup: pg_dump -h db_host -p db_port -U db_user -n schema_name -d db_name &gt; backup_filename.dump

Restore: psql db_name -h db_host -p db_port -U db_user &lt; backup_filename.dump
</code></pre>

<p>You should notice that we need to specify database host, port and user if we have the database setup in a host server, Amazon RDS in my case. That is the important point that some developers might forget.</p>

<p>For further detail of the other backup and restore options, please refer to the <a href="https://www.postgresql.org/docs/">PostgreSQL docs</a> and look for database backup and that applies to the Postgres version you use.</p>

<p>Enjoy your DBA time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dump Postgres Data From Specific Table]]></title>
    <link href="http://pirunseng.github.io/blog/2017/10/20/dump-postgres-data-from-specific-table/"/>
    <updated>2017-10-20T15:59:56+07:00</updated>
    <id>http://pirunseng.github.io/blog/2017/10/20/dump-postgres-data-from-specific-table</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re in a hurry to make your code work as expected, and you don&rsquo;t prefer to read the document much, we have something in common. And this article is right for you.</p>

<p><img class="[test]" src="http://pirunseng.github.io/images/pg/dump_table.png" title="Dump Table" ></p>

<p>If we haven&rsquo;t read the note of the document as the screenshot above, then we missed something. And what we missed is the prefix schema name on our table name. So, instead of <code>-n schema_name -t table_name</code>, we should use this <code>-t schema_name.table_name</code>.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
